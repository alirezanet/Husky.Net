import{d as a}from"./app.b09da964.js";import{_ as n}from"./plugin-vue_export-helper.21dcd24c.js";const t={},s=a(`<h1 id="automate-installation-for-other-contributors" tabindex="-1"><a class="header-anchor" href="#automate-installation-for-other-contributors" aria-hidden="true">#</a> Automate installation for other contributors</h1><p>Husky.Net brings the <strong>dev-dependency</strong> concept to the .NET ecosystem.</p><p>You can attach husky to your project without adding extra dependencies! This way the other contributors will use your pre-configured tasks automatically.</p><h2 id="attach-husky-to-your-project" tabindex="-1"><a class="header-anchor" href="#attach-husky-to-your-project" aria-hidden="true">#</a> Attach Husky to your project</h2><p>To attach Husky to your project, you can use the following command:</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>dotnet husky attach <span class="token operator">&lt;</span>path-to-project-file<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>This will add the required configuration to your project file.</p><p>check out the <a href="#manual-attach">Manual Attach</a> section for more details.</p><h2 id="disable-husky-in-ci-cd-pipelines" tabindex="-1"><a class="header-anchor" href="#disable-husky-in-ci-cd-pipelines" aria-hidden="true">#</a> Disable husky in CI/CD pipelines</h2><p>You can set the <code>HUSKY</code> environment variable to <code>0</code> in order to disable husky in CI/CD pipelines.</p><h2 id="manual-attach" tabindex="-1"><a class="header-anchor" href="#manual-attach" aria-hidden="true">#</a> Manual Attach</h2><p>To manually attach husky to your project, add the below code to one of your projects (<em>.csproj/</em>.vbproj).</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Target</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>husky<span class="token punctuation">&quot;</span></span> <span class="token attr-name">BeforeTargets</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Restore;CollectPackageReferences<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Condition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>$(HUSKY)<span class="token punctuation">&#39;</span> != 0<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Exec</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dotnet tool restore<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">StandardOutputImportance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Low<span class="token punctuation">&quot;</span></span> <span class="token attr-name">StandardErrorImportance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>High<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Exec</span> <span class="token attr-name">Command</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>dotnet husky install<span class="token punctuation">&quot;</span></span> <span class="token attr-name">StandardOutputImportance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Low<span class="token punctuation">&quot;</span></span> <span class="token attr-name">StandardErrorImportance</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>High<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name">WorkingDirectory</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../../<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>  <span class="token comment">&lt;!--Update this to the relative path to your project root dir --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Target</span><span class="token punctuation">&gt;</span></span>
</code></pre></div><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>Make sure to update the working directory depending on your folder structure it should be a relative path to your project root dir</p></div><div class="custom-container warning"><p class="custom-container-title">WARNING</p><p>Adding the above code to a multiple targeted project will cause husky to run multiple times. e.g <code>&lt;TargetFrameworks&gt;netcoreapp3.1;net5.0;net6.0;net7.0&lt;/TargetFrameworks&gt;</code></p><p>to avoid this, you can add the <code>$(IsCrossTargetingBuild)&#39; == &#39;true&#39;</code> condition to the target. e.g</p><div class="language-xml ext-xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Target</span> <span class="token attr-name">Name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>husky<span class="token punctuation">&quot;</span></span> <span class="token attr-name">BeforeTargets</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Restore;CollectPackageReferences<span class="token punctuation">&quot;</span></span> <span class="token attr-name">Condition</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&#39;</span>$(HUSKY)<span class="token punctuation">&#39;</span> != 0 and <span class="token punctuation">&#39;</span>$(IsCrossTargetingBuild)<span class="token punctuation">&#39;</span> == <span class="token punctuation">&#39;</span>true<span class="token punctuation">&#39;</span><span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
...
</code></pre></div></div><h2 id="package-json-alternative" tabindex="-1"><a class="header-anchor" href="#package-json-alternative" aria-hidden="true">#</a> package.json alternative</h2><p>If you are using the npm, add the below code to your package.json file will automatically install husky after the npm install</p><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code> <span class="token property">&quot;scripts&quot;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token property">&quot;prepare&quot;</span><span class="token operator">:</span> <span class="token string">&quot;dotnet tool restore &amp;&amp; dotnet husky install&quot;</span>
 <span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div>`,18);function e(o,p){return s}var l=n(t,[["render",e]]);export{l as default};
